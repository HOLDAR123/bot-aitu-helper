import { Context, Markup, Telegraf } from "telegraf";
import { Handler } from "./handler.class";
import {getUserLanguage} from "../sessions/language.session";
import {sendCleanMessage} from "../../utils/message.utils";
import {MainMenuService} from "../services/mainMenu.service";

export class StartHandler extends Handler {
    handle(): void {
        this.bot.command("start", this.handleStartCommand.bind(this));
    }

    private async handleStartCommand(ctx: Context) {
        const userId = ctx.from?.id;
        if (!userId) {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ userId");
            return;
        }

        try {
            // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if (ctx.message?.message_id) {
                try {
                    await ctx.deleteMessage(ctx.message.message_id);
                } catch (deleteError) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    console.debug(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${ctx.message.message_id}:`, deleteError);
                }
            }

            const lang = getUserLanguage(userId);

            if (!lang) {
                await this.showLanguageSelection(ctx, userId);
                return;
            }

            await MainMenuService.showMenu(ctx, lang);
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≤ handleStartCommand –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            try {
                await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            } catch (replyError) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", replyError);
            }
        }
    }

    private async showLanguageSelection(ctx: Context, userId: number): Promise<void> {
        try {
            await sendCleanMessage(
                ctx,
                userId,
                "üåê –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:",
                Markup.inlineKeyboard([
                    [
                        Markup.button.callback("üá∞üáø “ö–∞–∑–∞“õ—à–∞", "SET_LANG_kz"),
                        Markup.button.callback("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "SET_LANG_ru"),
                        Markup.button.callback("üá¨üáß English", "SET_LANG_en"),
                    ],
                ])
            );
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            throw error;
        }
    }
}
