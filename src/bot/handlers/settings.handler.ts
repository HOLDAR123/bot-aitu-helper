import { Context, Markup, Telegraf } from "telegraf";
import { Handler } from "./handler.class";
import {getUserLanguage, setUserLanguage} from "../sessions/language.session";
import i18n from "../i18n/i18n";
import {sendCleanMessage} from "../../utils/message.utils";
import {MainMenuService} from "../services/mainMenu.service";


export class SettingsHandler extends Handler {
    handle(): void {
        this.bot.action("OPEN_SETTINGS", this.openSettingsMenu.bind(this));
        this.bot.action(/SET_LANG_(.+)/, this.setLanguage.bind(this));
    }

    private async openSettingsMenu(ctx: Context): Promise<void> {
        const userId = ctx.from?.id;
        if (!userId) {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ userId");
            return;
        }

        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            if (ctx.callbackQuery?.message?.message_id) {
                try {
                    console.debug(`SettingsHandler: —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ${ctx.callbackQuery.message.message_id}`);
                    await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
                    console.debug(`SettingsHandler: —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–æ`);
                } catch (deleteError) {
                    console.debug(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:`, deleteError);
                }
            }

            const lang = getUserLanguage(userId) || "ru";
            const t = i18n.getFixedT(lang);

            await sendCleanMessage(
                ctx,
                userId,
                "üåê –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:",
                Markup.inlineKeyboard([
                    [
                        Markup.button.callback("üá∞üáø “ö–∞–∑–∞“õ—à–∞", "SET_LANG_kz"),
                        Markup.button.callback("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "SET_LANG_ru"),
                        Markup.button.callback("üá¨üáß English", "SET_LANG_en"),
                    ],
                ])
            );

            await ctx.answerCbQuery();
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            try {
                await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
            } catch (cbError) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query:", cbError);
            }
        }
    }

    private async setLanguage(ctx: Context & { match?: RegExpExecArray }): Promise<void> {
        const userId = ctx.from?.id;
        if (!userId) {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –±–µ–∑ userId");
            return;
        }

        try {
            const lang = ctx.match?.[1];
            if (!lang || !['en', 'ru', 'kz'].includes(lang)) {
                console.warn(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: ${lang}`);
                await ctx.answerCbQuery("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫");
                return;
            }

            setUserLanguage(userId, lang);
            await ctx.answerCbQuery();

            const t = i18n.getFixedT(lang);
            await sendCleanMessage(ctx, userId, t("language_selected"));

            await MainMenuService.showMenu(ctx, lang);
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            try {
                await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —è–∑—ã–∫–∞");
            } catch (cbError) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query:", cbError);
            }
        }
    }
}
