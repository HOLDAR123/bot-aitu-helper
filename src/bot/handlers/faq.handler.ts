import { Context, Markup } from "telegraf";
import { Handler } from "./handler.class";
import { getUserLanguage } from "../sessions/language.session";
import { getLastMessageId, setLastMessageId } from "../sessions/message.session";
import i18n from "../i18n/i18n";
import {OpenaiService} from "../services/openai.service";
import { sendCleanMessage } from "../../utils/message.utils";

const awaitingUserInput = new Set<number>();
const promptMessages = new Map<number, number>();

export class FaqHandler extends Handler {
    private openaiService: OpenaiService;

    constructor(botInstance: any) {
        super(botInstance);
        const apiKey = process.env.OPENAI_API_KEY;
        if (!apiKey) {
            console.warn("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
        }
        this.openaiService = new OpenaiService(apiKey || "");
    }

    handle(): void {
        this.bot.action("MENU_FAQ", this.askQuestion.bind(this));
        this.bot.action("MENU_BACK", this.handleBack.bind(this));
        this.bot.on("text", this.handleText.bind(this));
    }

    private async askQuestion(ctx: Context): Promise<void> {
        const userId = ctx.from?.id;
        if (!userId) {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–µ–∑ userId");
            return;
        }

        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            if (ctx.callbackQuery?.message?.message_id) {
                try {
                    console.debug(`FaqHandler: —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ${ctx.callbackQuery.message.message_id}`);
                    await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
                    console.debug(`FaqHandler: —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–æ`);
                } catch (deleteError) {
                    console.debug(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:`, deleteError);
                }
            }

            const lang = getUserLanguage(userId) || "ru";
            const t = i18n.getFixedT(lang);

            awaitingUserInput.add(userId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const sentMessage = await ctx.reply(
                t("faq_enter_question"),
                Markup.inlineKeyboard([
                    [Markup.button.callback(t("back"), "MENU_BACK")]
                ])
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            setLastMessageId(userId, sentMessage.message_id);
            promptMessages.set(userId, sentMessage.message_id);
            
            console.debug(`FaqHandler: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${sentMessage.message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            
            await ctx.answerCbQuery();
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            try {
                await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–ø—Ä–æ—Å–∞");
            } catch (cbError) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query:", cbError);
            }
        }
    }

    private async handleBack(ctx: Context): Promise<void> {
        const userId = ctx.from?.id;
        if (!userId) {
            console.warn("–ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –±–µ–∑ userId");
            return;
        }

        try {
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            awaitingUserInput.delete(userId);
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            await this.clearPromptMessage(userId);
            
            await ctx.answerCbQuery();
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            const lang = getUserLanguage(userId) || "ru";
            const { MainMenuService } = await import("../services/mainMenu.service");
            await MainMenuService.showMenu(ctx, lang);
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            try {
                await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ");
            } catch (cbError) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query:", cbError);
            }
        }
    }

    private async handleText(ctx: Context): Promise<void> {
        const userId = ctx.from?.id;
        if (!userId) {
            console.warn("–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –±–µ–∑ userId");
            return;
        }

        if (!awaitingUserInput.has(userId)) return;
        if (!ctx.message || !("text" in ctx.message)) return;

        try {
            const userMessageId = ctx.message.message_id;
            const query = ctx.message.text;

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if (!query || query.trim().length === 0) {
                await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.");
                return;
            }

            if (query.length > 1000) {
                await ctx.reply("–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.");
                return;
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.clearPromptMessage(userId);
            await this.deleteMessage(userId, userMessageId);

            awaitingUserInput.delete(userId);

            const lang = getUserLanguage(userId) || "ru";
            const t = i18n.getFixedT(lang);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingMsg = await ctx.reply("ü§î –ò—â—É –æ—Ç–≤–µ—Ç...");

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            const answer = await this.openaiService.getAnswer(query);

            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            try {
                await ctx.deleteMessage(loadingMsg.message_id);
            } catch {}

            const response = `${t("faq_found_answer")}\n\n${answer}`;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º sendCleanMessage –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await sendCleanMessage(
                ctx,
                userId,
                response,
                Markup.inlineKeyboard([
                    [Markup.button.callback(t("faq_ask_again"), "MENU_FAQ")],
                    [Markup.button.callback(t("back"), "MENU_BACK")]
                ])
            );
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            awaitingUserInput.delete(userId);
            await this.clearPromptMessage(userId);
            
            try {
                await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            } catch (replyError) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", replyError);
            }
        }
    }

    private async clearPromptMessage(userId: number): Promise<void> {
        const promptMessageId = promptMessages.get(userId);
        if (promptMessageId) {
            await this.deleteMessage(userId, promptMessageId);
            promptMessages.delete(userId);
        }
    }

    private async deleteMessage(userId: number, messageId: number): Promise<void> {
        try {
            await this.bot.telegram.deleteMessage(userId, messageId);
        } catch (error) {
            console.debug(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}:`, error);
        }
    }
}
