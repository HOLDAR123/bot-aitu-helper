import { Command } from './commands/command.class';
import { Context, session, Telegraf } from 'telegraf';
import {IConfigService} from "../config/config.interface";
import {Handler} from "./handlers/handler.class";

export class Bot {
  private readonly bot: Telegraf<Context>;
  private commands: Command[] = [];
  private handlers: Handler[] = [];

  constructor(private readonly configService: IConfigService) {
    const token = this.configService.get('BOT_TOKEN');
    if (!token) {
      throw new Error('BOT_TOKEN is required in environment variables');
    }
    
    this.bot = new Telegraf<Context>(token);
    this.bot.use(session());
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err, ctx) => {
      console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–ª—è ${ctx.updateType}:`, err);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      try {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      } catch (replyError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
      }
    });
  }

  public registerCommands(commands: Command[]): void {
    this.commands = commands;
    for (const command of this.commands) {
      try {
        command.handle();
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã ${command.constructor.name}:`, error);
      }
    }
    console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${this.commands.length}`);
  }

  public registerHandlers(handlers: Handler[]): void {
    this.handlers = handlers;
    for(const handler of this.handlers) {
      try {
        handler.handle();
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ${handler.constructor.name}:`, error);
      }
    }
    console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ handler-–æ–≤: ${this.handlers.length}`);
  }

  public async init(): Promise<void> {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');

    try {
      await this.bot.telegram.deleteWebhook();
      console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));

      console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
      await this.bot.launch();
      console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
      const botInfo = await this.bot.telegram.getMe();
      console.log(`ü§ñ –ë–æ—Ç @${botInfo.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  public async stop(signal: string): Promise<void> {
    console.log(`\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...`);
    try {
      await this.bot.stop(signal);
      console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }

  /** –î–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É Telegraf –¥–ª—è –∫–æ–º–∞–Ω–¥ */
  public get instance(): Telegraf<Context> {
    return this.bot;
  }
}
